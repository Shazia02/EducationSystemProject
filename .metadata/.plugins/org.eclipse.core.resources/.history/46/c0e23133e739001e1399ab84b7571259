package com.education.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.education.dto.CourseDto;
import com.education.model.Course;
import com.education.repository.CourseRepository;

@RestController
public class CourseController {
	
	private static final Logger log = LoggerFactory.getLogger(CourseController.class);
	private final CourseRepository repository;

	CourseController(CourseRepository repository) {
	    this.repository = repository;
	  }
	
	 @GetMapping("/welcome")
	  public String welcome() {
		 log.info("inside welcome");
		 return "welcome";
	   
	  }
	
	 @GetMapping("/courses")
	  List<Course> allCourses() {
		 log.info("inside allCourses");
	    return repository.findAll();
	  }
	 
	 @PostMapping("/courses")
	 Course newEmployee(@RequestBody Course newCourse) {
	    return repository.save(newCourse);
	  }

	  // Single item
	  
//	  @GetMapping("/courses/{id}")
//	  Course one(@PathVariable Long id) {	    
//	    return repository.findById(id)
//	      .orElseThrow(() -> new CourseNotFoundException(id));
//	  }

	  @PutMapping("/employees/{id}")
	  Course replaceEmployee(@RequestBody Course newCourse, @PathVariable Long id) {
	    
	    return repository.findById(id)
	      .map(course -> {
	    	  course.setCourseName(null)
	    	  course.setRole(newEmployee.getRole());
	        return repository.save(employee);
	      })
	      .orElseGet(() -> {
	        newEmployee.setId(id);
	        return repository.save(newEmployee);
	      });
	  }

	  @DeleteMapping("/employees/{id}")
	  void deleteEmployee(@PathVariable Long id) {
	    repository.deleteById(id);
	  }
	 
	 


}
