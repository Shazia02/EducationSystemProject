package com.student.controller;

import java.util.Arrays;
import java.util.List;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.student.dto.StudentDto;
import com.student.model.Course;
import com.student.service.StudentService;



@RestController
@Validated
public class StudentController {
	
	@Autowired
	StudentService studentService;
	
	 @PostMapping("/students")
	 @PreAuthorize("hasRole('ADMIN')")
	 ResponseEntity<StudentDto> registerStudent(@RequestBody StudentDto student) {
		StudentDto studentDto= studentService.registerStudent(student);
		return ResponseEntity.ok().body(studentDto);	

	  }
	 
	 @GetMapping(value="/student/courses")
	 public List<Object> getCourses(){
		 String url="http://localhost:8080/courses";
		 RestTemplate  restTemplate=new RestTemplate();
		 Object[] courses=restTemplate.getForObject(url, Object[].class);
		 return Arrays.asList(courses);
		 
	 }
	 @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
	 @DeleteMapping("/student/{studentId}")
	 ResponseEntity<String> deleteEmployee(@PathVariable Long studentId) {
		 studentService.deleteStudent(studentId);
		 return ResponseEntity.ok().body("Employee deleted with success!");		 
	   
	  }
	 
	 @GetMapping("/student/{courseId}")
	 ResponseEntity<StudentDto> getAllSudents(@PathVariable Long courseId) {
		 List<StudentDto> studentDtoList= studentService.getAllStudent(courseId);
		 JSONObject json = new JSONObject();
		 
		 return ResponseEntity.ok().body(studentDtoList);
	  }


}
